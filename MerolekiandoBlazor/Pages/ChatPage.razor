@page "/chatpage"
@inject NavigationManager NavigationManager
@using MerolekiandoBlazor.Data;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;

<style>
    .open-button {
        background-color: rgba(84, 180, 211, 1);
        color: white;
        padding: 16px 20px;
        border: none;
        cursor: pointer;
        opacity: 0.8;
        position: fixed;
        bottom: 0px;
        right: 28px;
        width: 280px;
        display: flex;
    }

        .open-button:hover {
            color: white;
            text-decoration: none;
        }
    /* The popup chat - hidden by default */
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 0px;
        right: 15px;
        border: 3px solid #F1F1F1;
        z-index: 9;
    }

    .chat-default-header-bg {
        background-color: rgba(84, 180, 211, 1);
        color: white;
    }

    .chat-default-bg {
        background-color: rgba(57, 192, 237, 0.2);
    }

    .p2-bg {
        background-color: #F5F6F7;
    }

    .send-default-color {
        color: rgba(84, 180, 211, 1);
    }

    .card-body {
        overflow-y: auto;
        overflow-x: hidden;
    }

        .card-body::-webkit-scrollbar {
            width: 6px;
        }
        /* Track */
        .card-body::-webkit-scrollbar-track {
            background: #F1F1F1;
        }
        /* Handle */
        .card-body::-webkit-scrollbar-thumb {
            border-radius: 5px;
            background: #C1BFBF;
        }
            /* Handle on hover */
            .card-body::-webkit-scrollbar-thumb:hover {
                background: #555;
            }
</style>
<h4>Chat</h4>

<a id="open-button" class="open-button no-fade d-flex align-items-center justify-content-between d-none"
   onclick="openForm()">
    <h5> Live Chat</h5>
    <i class="bi bi-chevron-compact-down"></i>
</a>
<div class="chat-popup panel-collapse collapse" id="chatbox">
    <div class="card" id="chat4">
        <div class="card-header chat-default-header-bg d-flex align-items-center justify-content-between">
            <h5> Live Chat</h5>
            <a class="cursor-pointer" onclick="closeForm()"><i class="bi bi-x text-white "></i></a>
        </div>
        <div class="card-body perfect-scrollbar" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px">
            @((MarkupString)messages)
        </div>
        <div class="card-footer bg-white d-flex justify-content-start align-items-center p-3">
            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava5-bg.webp" alt="avatar 3"
                 style="width: 40px; height: 100%;" class="me-1">
            <input type="text bg-white" @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control form-control-md" id="exampleFormControlInput3"
                   placeholder="Type message">
            <a class="ms-1 text-muted"><i class="bi bi-paperclip"></i></a>
            <a class="ms-3 text-muted"><i class="bi bi-emoji-smile"></i></a>
            <a class="ms-3 text-info cursor-pointer" @onclick="Send" disabled="@(!IsConnected)">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                     fill="currentColor" class="bi bi-send-fill send-default-color" viewBox="0 0 16 16">
                    <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                </svg>
            </a>
        </div>
    </div>
</div>

@inject IJSRuntime JS;

@code {
    private string url = "https://lostbrassapple27.conveyor.cloud/";
    private int factN;
    private int factF;
    private string messages = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;
    public static string? usrnm;
    private HubConnection? hubConnection;

    private async Task Connect()
    {
        var value = await JS.InvokeAsync<string>("localStorage.getItem", "decryptedToken");
        UserDto person = JsonSerializer.Deserialize<UserDto>(value);

        usrnm = person.Name;

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub"))
        .Build();
        hubConnection.On<string, string>("GetThatMessageDude", (usrnm, message) =>
        {
            InvokeAsync(() =>
            {
                var msg = $"{(string.IsNullOrEmpty(usrnm) ? "" : usrnm + ": ")} {message}";
                messages += msg + "\n";
            });

            //JS.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            //StateHasChanged();
        });
        await hubConnection.StartAsync();
        SendConn();
    }


    private async Task Send()
    {
        //await hubConnection.StartAsync();

        if (hubConnection.ConnectionId != null)
        {

            string sellerId = await JS.InvokeAsync<string>("localStorage.getItem", "sellerId");
            string Pid = await JS.InvokeAsync<string>("localStorage.getItem", "idOfClickedProduct");
            if (string.IsNullOrEmpty(Pid))
            {
                Pid = await JS.InvokeAsync<string>("localStorage.getItem", "clickedProduct");
            }
            string userId = await JS.InvokeAsync<string>("localStorage.getItem", "userId");

            string conn = hubConnection.ConnectionId;

            string apiUrl = $"{url}api/Extra/Chat";


            WebChatDto dtoMdl = new()
                {
                    message = message,
                    userId = sellerId,
                    Pid = Pid,
                    from = userId,
                    conn = conn
                };


            var httpClientHandler = new HttpClientHandler();

#if DEBUG
    httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
#endif

            HttpClient client = new HttpClient(httpClientHandler);

            var content = new StringContent(JsonSerializer.Serialize(dtoMdl), System.Text.Encoding.UTF8, "application/json");

            var response = await client.PostAsync(apiUrl, content);

            SellerDto seller = new();

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                responseContent = responseContent.Replace("\\", "");
                seller = JsonSerializer.Deserialize<SellerDto>(responseContent);
            }
            else
            {
                var sd = response.StatusCode;
            }
            UpdateSendMsg(usrnm, message);
            await hubConnection.SendAsync("AddMessageToChat", usrnm, message, seller.connId);

            StateHasChanged();

            //message = string.Empty;
            //hubConnection.On<string, string>("GetThatMessageDude", (usrnm, message) =>
            //{
            //    InvokeAsync(() =>
            //    {
            //        var msg = $"{(string.IsNullOrEmpty(usrnm) ? "" : usrnm + ": ")} {message}";
            //        messages += msg + "\n";
            //    });

            //    //JS.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            //    //StateHasChanged();
            //});
        }
    }
    protected async Task SendConn()
    {
        // Retrieve data from local storage
        //string userId = await JS.InvokeAsync<string>("localStorage.getItem", "sellerId");
        int userId = await JS.InvokeAsync<int>("parseInt", await JS.InvokeAsync<string>("localStorage.getItem", "userId"));
        int sellerId = await JS.InvokeAsync<int>("parseInt", await JS.InvokeAsync<string>("localStorage.getItem", "sellerId"));
        string Pid = await JS.InvokeAsync<string>("localStorage.getItem", "idOfClickedProduct");
        if (string.IsNullOrEmpty(Pid))
        {
            Pid = await JS.InvokeAsync<string>("localStorage.getItem", "clickedProduct");
        }
        string conn = hubConnection.ConnectionId;

        string urlToSend = $"{url}api/Extra/UpdateConnection?conn={conn}&userId={userId}&sellerId={sellerId}&pId={Convert.ToInt32(Pid)}";
        // Construct the data to send in the API request
        //var requestData = new
        //{
        //    conn,
        //    userId
        //};

        // Serialize the data
        //var json = JsonSerializer.Serialize(requestData);
        //var content = new StringContent(json, Encoding.UTF8, "application/json");
        //var response = await client.PostAsync(apiUrl, content);
        // Send the API request
        var httpClientHandler = new HttpClientHandler();


        httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;


        HttpClient client = new HttpClient(httpClientHandler);
        var response = await client.PostAsync(urlToSend, null);

        // Handle the response if needed
        if (response.IsSuccessStatusCode)
        {
            var responseGot = await response.Content.ReadAsStringAsync();
        }
        else
        {
            // API request failed
            var sd = response.StatusCode;
        }
    }
    private void UpdateSendMsg(string usrnm, string message)
    {
        messages += $"<div class=\"d-flex flex-row justify-content-start\">\r\n  <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava5-bg.webp\"\r\n  alt=\"avatar 1\" style=\"width: 45px; height: 100%;\">\r\n  <div>\r\n  <p class=\"small p-2 ms-3 mb-1 rounded-3 p2-bg\">{usrnm}: {message}</p>\r\n  \r\n  <p class=\"small ms-3 mb-3 rounded-3 text-muted\">23:58</p>\r\n  </div>\r\n  </div>" + "\n";
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        //if (args.Key.Equals("Enter"))
        //{
        //    await Send();
        //}
    }
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Connect();
            //SendConn();
        }
    }
}