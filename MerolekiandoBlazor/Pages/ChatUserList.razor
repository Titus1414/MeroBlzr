@page "/ChatUserList"
@inject ChatPopUp ChatPopup
@inject NavigationManager NavigationManager
@using MerolekiandoBlazor.Data;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using System.Net.Http.Headers;

<div class="card" id="chat4">
    <div class="card-header chat-default-header-bg d-flex align-items-center justify-content-between">
        <h5> Chat User List</h5>
        <a class="cursor-pointer" onclick="closeForm()"><i class="bi bi-x text-white "></i></a>
    </div>
    <div class="card-body perfect-scrollbar" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px">
        @*@((MarkupString)users)*@
        @foreach (var user in chatUsers)
        {
            <div class="card d-flex flex-row shadow border-0 mb-2">
                @*@onclick="()=> SaveIdToLocalStorage(user.from)"*@
                <a @onclick="()=> SaveIdToLocalStorage(user.from)" class="text-decoration-none text-dark cursor-pointer" style="width: 100%">
                    <div class="card-body px-2 py-1">
                        <h6>@user.name</h6> 
                        <p class="small px-2 py-1 mb-1 rounded-3 p2-bg">@user.lastMessage</p> 
                    </div></a> </div>
        }
    </div>
</div>

@inject IJSRuntime JS;

@code {

    [Parameter]
    public EventCallback OnUserClicked { get; set; }
    
    private string url = "https://differentsparklybike85.conveyor.cloud/";
    private string users = string.Empty;
    List<chatUsersDto> chatUsers = new();
    protected async Task GetChatUsers()
    {
        string token = await JS.InvokeAsync<string>("localStorage.getItem", "encryptedToken");

        var apiUrl = $"{url}api/Extra/GetChatUsers";

        //var httpClientHandler = new HttpClientHandler();

        //httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;

        //HttpClient client = new HttpClient(httpClientHandler);
        var httpClientHandler = new HttpClientHandler();
        httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;

        HttpClient client = new HttpClient(httpClientHandler);
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        // Send the GET request
        var response = await client.GetAsync(apiUrl);

        //var response = await httpClient.GetAsync(apiUrl);

        // Initialize the list of chat users


        // Handle the response if successful
        if (response.IsSuccessStatusCode)
        {

            // Deserialize the response content to a list of ChatUser objects

            var responseContent = await response.Content.ReadAsStringAsync();
            responseContent = responseContent.Replace("\\", "");
            ResultDto responseObject = JsonSerializer.Deserialize<ResultDto>(responseContent);

            var sd = responseObject.result.ToString();
            chatUsers = JsonSerializer.Deserialize<List<chatUsersDto>>(responseObject.result.ToString());



        }
        else
        {
            // API request failed, handle the error
            // For example, log the error or show an error message
        }
        StateHasChanged();
        //return chatUsers;
    }
    
    public async Task SaveIdToLocalStorage(int id)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "currentChatId", id);

        HandleUserClicked(id);


    }

    private async Task HandleUserClicked(int userId)
    {
        await OnUserClicked.InvokeAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetChatUsers();
        }
    }

}